{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/2019-01-26-testing-using-frisby-js/post/","webpackCompilationHash":"22c46184d026e825f748","result":{"data":{"markdownRemark":{"html":"<p>Unit testing your code is great but some times you want to be able to test outside of your unit test stack.</p>\n<p>In my case, I wanted to run a set of tests against my API after deployment to validate functionality. Part integration test, part acceptance test, part smoke test, part contract test, whatever.</p>\n<p>A tool I like for this purpose is a node.js framework called <a href=\"https://www.frisbyjs.com\">Frisby.js</a>. Frisby will perform HTTP calls and allow for assertions on the results. Frisby supports all of the common HTTP verbs (get, post, put, delete) or you can roll your own http call using fetch.</p>\n<p>Assertions are done in a few ways:</p>\n<ul>\n<li>Ensure certain headers or response codes are returned as expected</li>\n<li>Ensure the response body adheres to a schema using <a href=\"https://github.com/hapijs/joi\">joi</a> to expect a specified schema or if you want more control you can inspect the response and use jasmine expect</li>\n<li>Break out and inspect the response body and build custom <a href=\"https://jestjs.io/\">jest</a> expectations (which are styled just like jasmines)</li>\n</ul>\n<p>Thanks to the <a href=\"https://jsonplaceholder.typicode.com/\">json placeholder</a>, I wrote up a few example tests demonstrating these three items:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">const frisby = require(&#39;frisby&#39;);\nconst Joi = frisby.Joi;\nconst todoApi = &#39;https://jsonplaceholder.typicode.com/todos&#39;;\n\ndescribe(&#39;Todos&#39;, function () {\n    // expect status code 200\n    it(&#39;should return 200&#39;, function () {\n        return frisby.get(todoApi)\n            .expect(&#39;status&#39;, 200)\n    });\n    // expect body schema\n    it(&#39;should return a list of todos&#39;, function () {\n        return frisby.get(todoApi)\n            .expect(&#39;jsonTypes&#39;, &#39;*&#39;, {\n                &#39;userId&#39;: Joi.number().required(),\n                &#39;id&#39;: Joi.number().required(),\n                &#39;title&#39;: Joi.string().required(),\n                &#39;completed&#39;: Joi.bool().required()\n            });\n    });\n    // custom expect assertion\n    it(&#39;should return ordered by id asc&#39;, function () {\n        return frisby.get(todoApi)\n            .then((response) =&gt; {\n                expect(response.json[0].id).toBe(1);\n                expect(response.json[1].id).toBe(2);\n                // and so on\n            });\n    });\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So as you can see, you can get quite a bit of value from testing with frisby. Because it leverages jest it is also possible to collect the test results using the command line using <code class=\"language-text\">--json --outputFile=&lt;output file name&gt;</code></p>","frontmatter":{"title":"Test your API with FrisbyJS","cover":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/2019-01-26-testing-using-frisby-js/post/","coverImageMaxWidth":800}}}