{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/2018-07-29/dotnet-host-service/","webpackCompilationHash":"43a4ab484307bf25edf1","result":{"data":{"markdownRemark":{"html":"<p>With dotnet core, traditional long running windows servers kinda went away.</p>\n<p>But there are a few ways to do long running tasks/services in core. One way that looks favorable is to use Hosted Services in a WebAPI project. One difference with hosted services vs windows services is that theres not and hooks for when the service is installed or uninstalled.</p>\n<p>Getting started is easy. A class/service just needs to implement the IHostedService interface. That interface requires implementation of StartAsync and StopAsync functions. These provide the hooks to start and stop the service just like the windows service.Â  In my RPI garage door project, I used hosted service to periodically poll my door sensor status. This service creates a timer worker and the timer worker kicks off a door check every 5 seconds. The door monitoring service just simply checks pin status and updates when status changes.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Logging<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Hosting<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> rpi_garage_door<span class=\"token punctuation\">.</span>Services \n<span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SchedulerService</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">IHostedService</span><span class=\"token punctuation\">,</span> IDisposable \n    <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Timer</span> _timer<span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger</span> _logger<span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IDoorMonitoringService</span> _doorMonitoringService<span class=\"token punctuation\">;</span> \n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">SchedulerService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IDoorMonitoringService</span> doorMonitoringService<span class=\"token punctuation\">,</span> ILogger<span class=\"token operator\">&lt;</span>PinService<span class=\"token operator\">></span> logger<span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">{</span> \n            _logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span> \n            _doorMonitoringService <span class=\"token operator\">=</span> doorMonitoringService<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Task</span> <span class=\"token function\">StartAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">{</span> \n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Timed Background Service is starting.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            _timer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Timer</span><span class=\"token punctuation\">(</span>DoWork<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> TimeSpan<span class=\"token punctuation\">.</span>Zero<span class=\"token punctuation\">,</span> TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span>CompletedTask<span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span> \n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DoWork</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span> state<span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">{</span> \n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Running \"</span> <span class=\"token operator\">+</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _doorMonitoringService<span class=\"token punctuation\">.</span><span class=\"token function\">PerformCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Task</span> <span class=\"token function\">StopAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">{</span> \n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Timed Background Service is stopping.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _timer<span class=\"token punctuation\">?.</span><span class=\"token function\">Change</span><span class=\"token punctuation\">(</span>Timeout<span class=\"token punctuation\">.</span>Infinite<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span>CompletedTask<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">{</span> \n            _timer<span class=\"token punctuation\">?.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Then service just needs to registered in the <code class=\"language-text\">startup.cs</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> rpi_garage_door \n<span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Startup</span> \n    <span class=\"token punctuation\">{</span> \n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n        <span class=\"token comment\">// This method gets called by the runtime. Use this method to add services to the container. </span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">{</span> \n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n            services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IHostedService</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SchedulerService</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n        <span class=\"token punctuation\">}</span> \n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"dotnet core hosted service","cover":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/2018-07-29/dotnet-host-service/","coverImageMaxWidth":800}}}